#!/usr/bin/env python3
"""
Comprehensive test of Orpheus TTS integration
Tests all components step by step to identify issues
"""

import asyncio
import sys
import os
import logging

# Add current directory to Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

async def test_step_1_imports():
    """Step 1: Test all imports"""
    print("üîç Step 1: Testing imports...")
    
    try:
        import torch
        print(f"‚úÖ PyTorch {torch.__version__} - CUDA: {torch.cuda.is_available()}")
        
        from transformers import AutoModelForCausalLM, AutoTokenizer
        print("‚úÖ Transformers")
        
        from snac import SNAC
        print("‚úÖ SNAC")
        
        import numpy as np
        import wave
        import io
        print("‚úÖ Audio processing libraries")
        
        from src.utils.config import config
        print("‚úÖ Config system")
        
        from src.tts.orpheus_tts_engine import OrpheusTTSEngine
        print("‚úÖ Orpheus TTS Engine")
        
        from src.tts.tts_service import TTSService
        print("‚úÖ TTS Service")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Import failed: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_step_2_config():
    """Step 2: Test configuration loading"""
    print("\nüîß Step 2: Testing configuration...")
    
    try:
        from src.utils.config import config
        
        print(f"‚úÖ TTS enabled: {config.tts.enabled}")
        print(f"‚úÖ TTS engine: {config.tts.engine}")
        print(f"‚úÖ Default voice: {config.tts.default_voice}")
        print(f"‚úÖ Sample rate: {config.tts.sample_rate}")
        print(f"‚úÖ Available voices: {len(config.tts.voices.hindi)} Hindi voices")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Config test failed: {e}")
        return False

async def test_step_3_snac_model():
    """Step 3: Test SNAC model loading"""
    print("\nüß™ Step 3: Testing SNAC model...")
    
    try:
        from snac import SNAC
        import torch
        
        print("üì• Loading SNAC model...")
        model = SNAC.from_pretrained("hubertsiuzdak/snac_24khz").eval()
        
        if torch.cuda.is_available():
            model = model.cuda()
            print("‚úÖ SNAC model loaded on GPU")
        else:
            print("‚úÖ SNAC model loaded on CPU")
        
        # Test basic model properties
        device = next(model.parameters()).device
        print(f"   Model device: {device}")
        
        # Test basic encoding/decoding
        print("üîß Testing SNAC encode/decode...")
        
        # Create dummy audio data
        dummy_audio = torch.randn(1, 1, 2048, device=device)
        
        # Encode
        with torch.inference_mode():
            codes = model.encode(dummy_audio)
            print(f"   Encoded to {len(codes)} code levels")
            
            # Decode
            reconstructed = model.decode(codes)
            print(f"   Decoded shape: {reconstructed.shape}")
        
        print("‚úÖ SNAC model working correctly")
        return True
        
    except Exception as e:
        print(f"‚ùå SNAC model test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_step_4_orpheus_engine():
    """Step 4: Test Orpheus TTS Engine"""
    print("\nüéµ Step 4: Testing Orpheus TTS Engine...")
    
    try:
        from src.tts.orpheus_tts_engine import OrpheusTTSEngine
        
        # Create engine
        engine = OrpheusTTSEngine()
        print("‚úÖ Engine created")
        
        # Test voice mapping
        test_voice = "‡§ã‡§§‡§ø‡§ï‡§æ"
        language = engine._get_language_for_voice(test_voice)
        print(f"‚úÖ Voice mapping: '{test_voice}' ‚Üí '{language}'")
        
        # Test available voices
        voices = engine.get_available_voices()
        print(f"‚úÖ Available voices: {len(voices)}")
        print(f"   Default: {engine.default_voice}")
        
        # Initialize engine
        print("üöÄ Initializing engine...")
        await engine.initialize()
        
        if engine.is_initialized:
            print("‚úÖ Engine initialized")
        else:
            print("‚ö†Ô∏è Engine initialization incomplete")
        
        # Test synthetic token generation
        print("üî¢ Testing synthetic token generation...")
        test_text = "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ø‡§π ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§π‡•à‡•§"
        tokens = engine._generate_synthetic_audio_tokens(test_text, "‡§ã‡§§‡§ø‡§ï‡§æ")
        print(f"‚úÖ Generated {len(tokens)} tokens")
        
        # Test audio generation
        print("üéµ Testing audio generation...")
        audio_data = await engine.generate_audio(test_text, "‡§ã‡§§‡§ø‡§ï‡§æ")
        
        if audio_data:
            print(f"‚úÖ Audio generated: {len(audio_data)} bytes")
            
            # Save test audio
            with open("test_step4_audio.wav", "wb") as f:
                f.write(audio_data)
            print("üíæ Audio saved as 'test_step4_audio.wav'")
        else:
            print("‚ùå No audio generated")
        
        # Cleanup
        await engine.close()
        
        return audio_data is not None
        
    except Exception as e:
        print(f"‚ùå Orpheus engine test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_step_5_tts_service():
    """Step 5: Test TTS Service"""
    print("\nüéØ Step 5: Testing TTS Service...")
    
    try:
        from src.tts.tts_service import TTSService
        
        # Create service
        service = TTSService()
        print("‚úÖ TTS Service created")
        
        # Initialize service
        print("üöÄ Initializing TTS service...")
        await service.initialize()
        
        if service.is_initialized:
            print("‚úÖ TTS Service initialized")
        else:
            print("‚ö†Ô∏è TTS Service initialization incomplete")
        
        # Test speech generation
        print("üéµ Testing speech generation...")
        test_text = "Hello! This is a comprehensive test."
        
        result = await service.generate_speech_async(
            text=test_text,
            voice="‡§ã‡§§‡§ø‡§ï‡§æ",
            return_format="wav"
        )
        
        if result["success"]:
            print("‚úÖ Speech generation successful")
            metadata = result["metadata"]
            print(f"   Processing time: {metadata.get('processing_time', 'unknown')}s")
            print(f"   Audio duration: {metadata.get('audio_duration', 'unknown')}s")
            print(f"   Realtime factor: {metadata.get('realtime_factor', 'unknown')}x")
            
            # Save audio
            if result["audio_data"]:
                import base64
                audio_bytes = base64.b64decode(result["audio_data"])
                with open("test_step5_service.wav", "wb") as f:
                    f.write(audio_bytes)
                print("üíæ Audio saved as 'test_step5_service.wav'")
        else:
            print(f"‚ùå Speech generation failed: {result.get('error', 'Unknown error')}")
        
        # Get service info
        service_info = service.get_service_info()
        print(f"‚úÖ Service info retrieved: {service_info['initialized']}")
        
        return result["success"]
        
    except Exception as e:
        print(f"‚ùå TTS Service test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_step_6_integration():
    """Step 6: Test full integration"""
    print("\nüîó Step 6: Testing full integration...")
    
    try:
        from src.tts.tts_service import TTSService
        
        # Test multiple languages and voices
        test_cases = [
            ("Hello! This is English.", "tara"),
            ("‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ø‡§π ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§π‡•à‡•§", "‡§ã‡§§‡§ø‡§ï‡§æ"),
            ("Bonjour! C'est fran√ßais.", "pierre"),
        ]
        
        service = TTSService()
        await service.initialize()
        
        for i, (text, voice) in enumerate(test_cases):
            print(f"üéµ Test case {i+1}: '{text}' with voice '{voice}'")
            
            result = await service.generate_speech_async(
                text=text,
                voice=voice,
                return_format="wav"
            )
            
            if result["success"]:
                print(f"   ‚úÖ Success! Duration: {result['metadata'].get('audio_duration', 'unknown')}s")
                
                # Save audio
                if result["audio_data"]:
                    import base64
                    audio_bytes = base64.b64decode(result["audio_data"])
                    with open(f"test_step6_case_{i+1}.wav", "wb") as f:
                        f.write(audio_bytes)
                    print(f"   üíæ Saved as 'test_step6_case_{i+1}.wav'")
            else:
                print(f"   ‚ùå Failed: {result.get('error', 'Unknown error')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Integration test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Run comprehensive test suite"""
    print("üîß Comprehensive Orpheus TTS Integration Test")
    print("=" * 60)
    
    # Run all test steps
    step1_ok = await test_step_1_imports()
    step2_ok = await test_step_2_config()
    step3_ok = await test_step_3_snac_model()
    step4_ok = await test_step_4_orpheus_engine()
    step5_ok = await test_step_5_tts_service()
    step6_ok = await test_step_6_integration()
    
    # Summary
    print("\nüìä Comprehensive Test Results:")
    print(f"   Step 1 - Imports:        {'‚úÖ OK' if step1_ok else '‚ùå Failed'}")
    print(f"   Step 2 - Config:         {'‚úÖ OK' if step2_ok else '‚ùå Failed'}")
    print(f"   Step 3 - SNAC Model:     {'‚úÖ OK' if step3_ok else '‚ùå Failed'}")
    print(f"   Step 4 - Orpheus Engine: {'‚úÖ OK' if step4_ok else '‚ùå Failed'}")
    print(f"   Step 5 - TTS Service:    {'‚úÖ OK' if step5_ok else '‚ùå Failed'}")
    print(f"   Step 6 - Integration:    {'‚úÖ OK' if step6_ok else '‚ùå Failed'}")
    
    all_ok = all([step1_ok, step2_ok, step3_ok, step4_ok, step5_ok, step6_ok])
    
    if all_ok:
        print("\nüéâ All tests passed! Orpheus TTS integration is working!")
        print("üéØ System ready for Voxtral integration")
        print("üéµ Generated audio files saved for verification")
    else:
        print("\nüí• Some tests failed")
        print("üîß Check the errors above and fix the issues")
    
    return all_ok

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)